^T: Input, Output, and Options
^ST: I/O and Options
^I: Introduction to Programming for Public Policy
^SI: Intro Programming
^D: October 10, 2016
^H: \include{pythonlst}
^H: \usepackage{perpage} 
^H: \MakePerPage{footnote}

+ Introduction
\setbeamertemplate{itemize/enumerate body begin}{\Large}
\setbeamertemplate{itemize/enumerate subbody begin}{\Large}
\setbeamertemplate{itemize/enumerate subsubbody begin}{\Large}
- Our python scripts have been `self-contained.'
- It is time to open them to the world:
-- \chred{Input/Output}: Play with data!
-- \chred{Options}: Modify them on the fly!

+ `Canonical' Reads \tright ex/a/for\_line\_in\_file.py
! Great news: you already know how!
\pythonexternal{ex/a/for_line_in_file.py}
- The syntax \emph{is} a \tt{for} loop -- nothin' to it!
- Just \tt{open()} the file with a \tt{`r'} flag, for `read.'
- You get one line at a time, and can do whatever you want with them.
- Use \tt{strip()} to remove any additional whitespace.

+ `Canonical' Writes \tright ex/a/canonical\_write.py
! Good news: fairly similar...
\pythonexternal{ex/a/canonical_write.py}
- The difference is that we're iterating over \emph{something else}.
- The output file is just an object, that we write to.
- There is also \tt{`a'}, for `append' (write at end of file).

+ `Canonical' Writes: \tt{with} \tright ex/a/canonical\_write\_with.py
- I sometimes use `\tt{with}' to specify a block in which to write.
- The file `snaps shut' at the end of the block.
\pythonexternal{ex/a/canonical_write_with.py}

+ Using and Filtering Inputs \tright ex/a/for\_line\_in\_grep.py
- Let's start by reproducing our `high salaries grep' from day 1.
\visible<2>{\pythonexternal{ex/a/for_line_in_grep.py}}

+ Python: Beyond Single Lines
- Using bash, we were limited in our `global' view.
- Though we could \tt{sort}, we mainly looked at one line at a time.
> 1em
- Python lets us store variables and manipulate the entire dataset.\footnote{Truth be told, bash allows this too; it's just less fun.}
-- In future weeks we'll learn more and more tools for doing this.

+ Aggregating at a Basic Level \tright{ex/a/fire\_salaries.py}
- What was the expenditure on salaries in the fire department?
\pythonexternal{ex/a/fire_salaries.py}
- Open \tt{ex/a/dept\_salaries.py}, and modify it to print the total, average, and max salaries, and the number of employees.
-- Use \tt{len()}, \tt{sum()}, and \tt{max()}.

+++ Formats

+ CSV: Comma Separated Values
- Common, simple, flat, but non-standardized format.
-- Text in columns separated by a delimiter (`escape' by quotes).
-- Can be read directly by e.g., Excel.
../img/csv_ex.png

+ CSV: The Module  \tright ex/a/csv\_test.py 
- I tend to just use a for loop, but there \emph{is} a csv module.
\pythonexternal{ex/a/csv_test.py}

+ JSON, or, dictionaries and lists revisited.
- Officially stands for JavaScript Object Notation, but now used in many languages.
- Common format for transmitting formatted data on the internet.
- Readily manipulable in Python: just dictionaries and lists.
-- Can be `nested' dictionaries -- much like classes.
-- Often, data is packaged with metadata, and you have to `navigate down' to a list of \emph{actually} useful data.
../img/json_ex.png:0.4:side Sample JSON Objects: \\ Dictionaries in Lists

+ JSON: Exploring and Accessing Data
- Let's explore some JSON data.  Please open a python prompt in ex/a/, and type this:
\pythonexternal{ex/a/open_json.py}
- Use \tt{narcotics.keys()} to find the data (a list).
- What are the most common drug offenses? [\link{https://gist.github.com/JamesSaxon/e2aca9e262b82ea84c57fd24add99e21}{Gist}]
-- Use a set comprehension (curly branches) to get the types.
-- Use a for loop to ask how many of each type there are.

+ JSON: Loading and Processing \tright ex/a/narco\_json.py
\pythonexternal{ex/a/narco_json_pres.py}

+ Pickle: Storing Arbitrary Objects
- If you have a time consuming step in your code, you can `pickle' a python object and later pick up where you left off.
- Where is JSON human-readable and portable, pickle is not -- it's a python-specific, binary file.
- But pickle files are typically less than half of a JSON object, and can be read much faster (in its most-recent release).
\pythonexternal{ex/a/pickle_ex.py}

- Many of the operations we've done, could be done in Excel.
- But in the next few weeks, we'll see a lot that can't...
- And a lot (most?) data comes in a format that is not immediately usable, and needs to be tinkered with (munged).

+++ Arguments

+ What Are Arguments
We have already used arguments to:
- perform functions on different inputs.
- modify the behavior of programs (e.g., grep -i or sort -r).
! Now let's modify the behavior of our scripts!
The idea is that we want the same code to be able to do many things, without rewriting it.

+ The argparse module \tright ex/a/options\_intro.py
Unapproachable \link{https://docs.python.org/3.5/library/argparse.html}{documentation} but a good \link{https://docs.python.org/3.5/howto/argparse.html}{tutorial}.
- Try running the simplest example, with `-h':
\pythonexternal{ex/a/options_intro.py}
\visible<2->{
Add a requred argument:
- \small \tt{parser.add\_argument("number", help="A number!")}
}
\visible<3->{
Add an optional argument (dashes, or `required'):
- \small \tt{parser.add\_argument("--extras", default = "yay!")}
}

+ Controling the Types
! Please follow along with these.
\visible<2->{
By default, all arguments are strings; `cast' them on the fly with `type.'
- \small \tt{parser.add\_argument("number", type = float, help="A number!")}
\tt{type} takes a function; lambda functions, str.lower, etc. work too. \\
}
>1.5em
\visible<3->{
Specifying default values is easy:
- \small \tt{parser.add\_argument("number", type = float, default = 3)}
}
>1.5em
\visible<4->{
Or an \tt{action="store\_true"} (default is the opposite):
- \small \tt{parser.add\_argument("--store", action="store\_true")}
}

+ Using the Arguments
- After running \tt{args = parser.parse\_args()}, the arguments become accessible as variables, via the long-form versions of the argument names, \tt{args.var\_name}.
- We can then pass these variables into a function or class, to run our script with varying behavior.
! Let's experiment with \tt{options\_example.py}.

