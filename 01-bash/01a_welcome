^T: Welcome: to the Class and to the Command Line!
^ST: Lecture 1A: Welcome!
^I: Introduction to Programming for Public Policy
^SI: IPPP   
^D: September 25, 2017
^H: \usepackage{animate}

+ Why Learn to Code?
\Large
# Technology powers the modern world.
#- Good policy requires that we understand the system.
#- Gain currency with technology so you can help govern it.  
#- What's at stake when services go wrong (VA, healthcare.gov).
#- Understand the potential of algorithms to improve policy. \\ \vspace{2em}
# Expand your own toolset.
#- Find, manipulate, and share data to get answers and promote solutions.
#- Needn't authorize money or create programs: \emph{just solve problems}. \\ \vspace{2em}
# And it's fun!  Like learning a language.

+ This is an Amazing Moment to Learn
# Software is easier and more powerful than ever.
#- Mapping, internet, etc.: making awesome stuff has never been easier.
# Governments are getting on board...
#- Target interventions (money) where it's most needed.
#- Modern interface for services.
#- `One size fits all' bureaucracy doesn't cut it.
# And they're learning to share their data.
#- Most states have \emph{some} data portal presence; \only<1>{many}\only<2->{a few} are \only<1-2>{very good}\only<3>{passable}.

+++ Coding for Public Policy

+ Prioritizing Building Inspections: Public Safety
../img/nyc_fire.png:0.5

+ Policing: Intervene with `At-Risk' Officer
../img/rayid.png

+ Boston 311 System: Improve Constituent Services
../img/bos311a.png; ../img/bos311b.png; ../img/bos311c.png

+ Mapping Trees in New York: Make Something Beautiful
../img/nyc_trees.png \link{http://jillhubley.com/project/nyctrees/}{jillhubley.com/project/nyctrees}

+ Poverty by Census Tract: Visualize the World
\centering See Jupyter Notebook, \tt{ex/Census.ipynb}.
../img/folium_pov_ex.png:0.9

+++ How the Class is Structured

+ What We Will and Won't Cover
- First-pass of low-level tools: the command line.
- Thinking algorithmically with python: coding.
-- Building blocks of code from the ground up.
- Fundamentals of databases and the web.
>1em
\hrule
>1em
- Higher-level analysis `recipes.'
-- Build your own projects from large, free components.
-- Wrangle data to get and share information, and create solutions.
>1em
\hrule
>1em
- However: not a management or policy course.
% slide iteration, size, x, y, angle, text
\caveat{2}{30}{50}{35}{10}{$\bm{\sim5}$ weeks}
\caveat{2}{30}{50}{70}{10}{$\bm{\sim5}$ weeks}

+ Assignments
- Weekly assignments (70\% of grade) posted on the class \link{https://classroom.github.com/classrooms/20690068-introduction-to-public-policy-30550-uc-harris}{Github site}.
-- HW1 due Oct. 4 at 1:30am: install software \& command line.
- You will also \emph{submit them} through `Github.'  
-- Covered Wednesday.  It is the `standard' for collaboratively developing and publishing code.
-- If you have trouble with git/Github, speak up fast!
- Collaborative (2 or 3 person) final project (25\%).  Start thinking about this now!  Look for data on government and non-profit sites, in corporate APIs -- anywhere!
-- For inspiration: \link{https://harris-ippp.github.io/final\#datasets-for-inspiration}{harris-ippp.github.io/final}.
-- Proposal due October 31, with datasets, group members, etc.  See site.
>0.5em
- Discussion board \& participation (5\%): good questions and useful answers both get ``points."

+ Yes, some group work.
! Real projects require collaboration.
- Developers use git to work collaboratively.  Using git is a skill.
-- You don't need to be in the same place, or even talk to your partner.
- Even better: learn to contribute to the open source community.
../img/group_assignments.png

+ Additional Resources 
- TA sessions in 289A on Thursday and Friday afternoons at 3:30-5pm (October 6 in 224).
-- Additional session tomorrow at noon in 289B, \emph{for installation problems}.
- Four fabulous TAs (2nd-year MSCAPP):
-- Victor Vilchis Tella (victorvt)
-- Emma Peterson (ecpeterson)
-- Andrew Yaspan (ayaspan)
-- Yuxi Wu (yuxiwu)
- Use the class discussion threads on the \link{https://canvas.uchicago.edu/courses/10240}{Canvas} page.
- All lecture slides and notebooks stored here -- follow \& bookmark! \\ \centering \link{http://github.com/harris-ippp/lectures/}{github.com/harris-ippp/lectures/} \\ 
>1em
- And \chred{please} (\chred{!!}) ask questions as we go.

+++ Welcome to the Command Line

+ Software
<1em
../img/programs.pdf:0.95

+  This will be different: hang in there.
- This may be one of the harder lectures -- a steep learning curve.
- We are doing it now, because everything else depends on it.
>1em
- We'll list and examine a `dictionary' of \emph{commands} (programs/words):
-# Navigation 
-# File and text manipulation
- Think of today as a `dictionary': understand the `meaning,' and look them up later.
- Learning to string them together will take practice (HW!).

+ Why Use The Command Line?
- Making Graphical User Interfaces (GUIs) is tricky and unenlightening.
- GUIs are often not extensible or scriptable: doing something fifty times usually requires the user to actually click around, fifty times!
-- Insane!  Computers are good at repetition!
- So we're better off running programs from the command line.
- Immediately available on Mac OS X.  On Windows, cygwin provides a Unix-like interface.
-- You should already have installed it!!

+ Approaching the Command Line
- Please open Terminal (Mac) or Cygwin (Windows).
- If you have not yet installed this (Windows), you can use \link{http://tmpnb.org}{tmpnb.org}.
-- This is \emph{not the real McCoy}, and you will need cygwin very soon!
<0.45em
../img/welcome_to_the_shell.png:0.7

+ Navigation Commands
\Large
- \chred{pwd}:     print working directory
- \chred{ls}:      list (files and folders)
- \chred{cd}:      change directory
- \chred{mkdir}:   create a directory
- \chred{mv}:      move or rename a file
- \chred{cp}:      copy a file or folder
- \chred{rm(dir)}: remove a file (directory) -- \red{¡¡Careful!!}
- \chred{man}:     read the `manual'
- \chred{chmod}: change the `permissions' of a file.
- \chred{open/explorer} (Mac/PC): open in default app.
>0.2em
- \chred{ssh/scp}: secure connections (not in this course)

+ Notes on the Directory Structure
! In \chred{cygwin}, your C drive is at /cygdrive/c/.
- \chred{`.'}: means \emph{this} directory
- \chred{`..'}: means one directory higher
- \chred{`\tt{\textasciitilde}'}: means `my home directory'
- \chred{`\tt{-}'}: the last directory I was in.
- \chred{'/'}: is `root'
> 1em
- \chred{\tt{*}}: is a `wildcard' (match anything or nothing)
> 1em
! Exercise: find, list, and open music or a doc.

+ Manipulating Output
Tremendous power `built in' to the command line: quickly compose programs to get answers.
- \chred{echo}:    parrot back some text
- \chred{curl}:    retrieving web resources.
- \chred{cat, head, tail}: `concatenate' (dump) a file, or part of it
- \chred{less}:    page through a file
- \chred{grep}:    search for lines in a file
- \chred{sed}:     find and replace
- \chred{wc}:      count words or lines in file
- \chred{sort}:    sort a file
- \chred{cut}:     choose out specific columns
- \chred{uniq}:    with \tt{-c}, count occurences of a unique line.
- \chred{python}:  much on this, later!

+ Going Further: Piping and Scripting
- The power of the command line comes from the ability to quickly compose programs from these building blocks.
- There are two import `connectors' to know:
--[\tt{|}]  \chred{pipe}: forward the output to the next command.
--[\tt{>}]  \chred{redirect output}: write to a file
- You may sometimes see these as well:
--[\tt{>>}] \chred{redirect output}: \emph{append} to a file.
--[\tt{<}]  \chred{redirect input}: feed \emph{in} to command.
--[\tt{<< X}] \chred{read input}: read from ithe command line `until X' (uncommon)

+ echo
- \tt{echo} just parrots everything that follows it:
` \pr echo hello world. \\ hello world.
- You could easily use this to write to a file... not like this!
` \pr echo Hello (and happy birthday) > bd.txt\\ -bash: \chred{syntax error} near unexpected token `('
- `Special' characters (!, \/, \$, (, ), etc.) need to be enclosed in quotes:
` \pr echo "Hello (and happy birthday)" > bd.txt

+ curl (or wget)
- \tt{curl} retrieves a web-page or other net resource [\link{https://data.cityofchicago.org/Administration-Finance/Current-Employee-Names-Salaries-and-Position-Title/xzkq-xp2w}{site}, \link{https://data.cityofchicago.org/api/views/xzkq-xp2w/rows.csv}{data}]:
` curl data.cityofchicago.org/api/views/xzkq-xp2w/rows.csv -s -o salaries.csv
- The `-o' option allows you to specify and output file name for the download.
-- And -s stands for `silent' -- see the \tt{man} pages.
! Please do the curl command.

+ cat/head/tail/less
- \tt{cat} dumps a file to the screen:
` \pr cat salaries.csv
- For very large files, better to check the beginning or end, or `page through' it:
` \pr head -42 salaries.csv \# first 42 lines
` \pr tail -12 salaries.csv \#  last 12 lines
` \pr less salaries.csv ~~~~\# h(elp), q(uit), b(ack), ...
- With \tt{<< X}, one could write a small script ... uncommon.

+ grep [1 of 3]
- \tt{grep} is a filter.  It finds all matching lines in a file.
` \pr grep EMANUEL salaries.csv
- Use the \tt{man} pages to figure how to reverse grep, or ignore case.
- \chred{grep is my favorite command.}  I hope you will enjoy it too!

+ grep [2 of 3]: Regular Expresion Special Characters 
Regular expressions (regex) are shorthand for complex matching.
- Dramatically expands potential of grep.
*T: A bit quirky at first, but super useful!
* c l
* \tt{\^}          & Beginning of the line. \\
* \$            & End of line. \\
* \tt{\textbackslash}  & Turn off the next special character. \\
* \tt{[ ]}      & Any {\it contained} characters; use `x-y' for range. \\
* \tt{[\^{} ]}  & None of contained characters. \\
* \tt{.}        & Any single character. \\
* \tt{*}        & The preceding character/expression, any number of times. \\
* \tt{\textbackslash\string{x\textbackslash\string}}    & The preceding, $x$ times. \\
* \tt{x|y}      & x OR y. \\

+[fragile] grep [3 of 3]: Applying Regular Expressions
- How much does the mayor make? 
\begin{tcolorbox}
\pr \verb|grep '^"EMA' salaries.csv|
\end{tcolorbox}
- Who makes more than \$200k?
\begin{tcolorbox}
\pr \verb|grep '\$[2-9][0-9]\{5\}\.' salaries.csv|
\end{tcolorbox}

+ wc: word count
- wc allows you to count the number of bytes (-c), number of words (-w) or number of lines (-l) in a file:
` \pr wc -l salaries.csv \# by far the most useful
- How many police offers are on the streets of Chicago?
` \pr grep -i "police officer" salaries.csv | wc -l
- How many of them are detectives?
` \pr grep "POLICE.*DETECTIVE" salaries.csv | wc -l
- What fraction of the city's salaried workers make more than \$100k?

+ sed
- sed allows for simple, regex find and replace
- If you learn \tt{vim} it is the same syntax:
` \pr sed \tqs{}s/find/replace/g\tqs{} salaries.csv
- Here, the \tt{s} means `search' and the \tt{g} means global/all occurrences in a line.  For instance, remove the \$ signs:
` \pr grep \tqs{}\textbackslash\$\tqs{} salaries.csv | sed \tqs{}s/\textbackslash\$//g\tqs 
- Technical warning: it's single quotes, here.  With double quotes, you'd need to `escape' the \$ twice: for the command line \emph{and} regex.

+ sort
- sort sorts your file, with many options.
! Find the 10 highest salaries in the city. \\ \small{man: \tt{-k} for key field, \tt{-t} for delimiter, \tt{-r} for reverse, \tt{-n} numeric.}
- Modify the sort command here:
` \pr grep \tqs{}\textbackslash\$\tqs{} salaries.csv | sed \tqs{}s/\textbackslash\$//g\tqs | sort | head
- The \link{https://gist.github.com/JamesSaxon/c223710765fdfe535582f3fc9f1b562e}{answer} -- don't peak!

+ cut (penultimate!)
- cut allows you to choose which columns to print. 
- Really needs the \tt{-d} (delimiter) and \tt{-f} (field) options.
- To print only the first names in the city:
` \pr cut -f2 -d, salaries.csv
- i.e., the second field, delimited by commas.

+ uniq (last one!)
- uniq prints unique lines: subsequent duplicates are removed.
- It is most-often used after sort, and with \tt{-c} option to \emph{count}.
- To count the occurrences of each last name:
` \pr cut -d, -f1 salaries.csv | sort | uniq -c 

+ That was a lot!
- You will use the navigation commands \emph{all the time}.
%
- The text analysis commands are super useful for fast answers.
-- In weeks 2-10, we'll focus on python, but the terminal should remain a first line of defense for parsing and approaching large files.
-- You will get more familiar with them in homework.
-- We need to move from ``issuing commands" to ``writing code"...
\centering 
\Huge
\visible<2>{Next up -- scripts!!}

