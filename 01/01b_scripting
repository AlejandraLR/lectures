^T: First Scripts in Python
^ST: Lecture 1B: Welcome!
^I: Introduction to Programming for Public Policy
^SI: Intro Programming
^D: September 26, 2016

+++ Simple Scripts

+ Writing a Script
- Our `salaries' command was getting hard to read (for humans).
- A script is a saved series of instructions for the computer.
- We can write that series in many languages: bash, python, perl, tcl, ...
%
- The command line language is `bash,'\footnote{Bourne Again SHell} and can be run via `source`.
` \pr echo "echo hello" > hw \\ \pr source hw \\ hello
- But `echo' is not a great way to write our long command!

+ Editing Text and Writing Code: Vim or Atom
- Computers `interpret' your code, or run a `compiled binary.'
-- \chred{Interpreters} are computer programs that follow your instructions `step-by-step.'
-- \chred{Compilers} translate what you write into something the computer understands `natively' (ones and zeros = binary).
- Files must contain \emph{exactly} and \emph{only} the code: nothing extraneous.
-- So, needless to say (?), Microsoft Word won't cut it.
>0.5em
- I propose to use \link{https://atom.io/}{Atom} (gui) or \link{http://www.vim.org/}{vim}: Vi IMproved (vi = visual).
-- The advantage of vi is that it's all from the command line.
-- Emacs (also command line) has many partisans, as well.
-- But emacs and vi have very high learning curves.
- Sometimes we'll use `Jupyter' -- a browser based environment.

+ Putting the Salaries Script Into a File
The long command: \link{http://tinyurl.com/z5ax56v}{tinyurl.com/z5ax56v}
>1.5em 
../img/salaries.pdf

+ A First Python Script
''' Create a file \texttt{hello\_world.py}, using vim Atom, TextEdit, etc.
''' Write \texttt{print("hello world")} in this file and save it.
''' Navigate to the directory that holds that file: \\ \texttt{cd /Users/jsaxon/Documents/...}
''' Type: \texttt{python hello\_world.py}
- To go further, we need the rules and building blocks of Python...

+ chmod
- chmod allows you to change the permissions of a file
- Each file has separate `permissions' for whether you (u), people in its `group' (g), or anyone (o), can read (r), write (w), or execute/run (x) the file.  You can add (+), remove (-), or set (=) permissions.
- Most often, use it to make a script executable, perhaps just for you:
` \pr cat hello\_world.py \\ \#!/usr/bin/env python \\ print("hello world") \\\pr chmod u+x hello\_world.py  \\ \pr ./hello\_world.py \# don't need `python' \\ hello world

\centering 
../img/pywordmark.png
+ 

+ What is Python?
! Python is a popular, high-level \\ interpreted programming language.
\chred{Interpreted}: computer `runs your instructions,' so you can:
- Run \chred{interactively}: execute one line of code at a time.
- Or \chred{script}: write down and save all of your commands.
- (It actually compiles itself, `just-in-time.')
>0.5em
\chred{High level:} python hides a lot of the complexity from you.
- You don't have to worry about moving bits (1s and 0s) around.
- And you can accomplish a lot, with relatively little code.

\centering
\Large
Through the next two lecture, we'll discuss:
! Types 
! Control
! Assignment, Operators, and Methods
Some of them will be mixed together.

+ The Building Blocks \tright{Notes: See Jupyter Notebook.}
Launch python on your computer, or open a jupyter notebook:
! Command line: `python' (must be python 3).
! Local Jupyter: Anaconda Navigator
! Online Jupyter: \link{http://tmpnb.org}{tmpnb.org} or \link{http://try.jupyter.org}{try.jupter.org}
\centering \small{Click `New' in the upper right corner, then Python 3.}
../img/jupyter.png

