^T: The Relational Model and the \\ Structured Query Language
^ST: RDBM and SQL
^H: \include{sqllst}

! \Huge{Who are these dudes?}

../img/gates.jpg:1.0:full

../img/buffett.jpg:1.0:full

../img/ellison.jpg:1.0:full
\only<2>{\placegraphic{29}{88}{10cm}{../img/oracle_logo}}

+++ Databases: Content
- As these are not consumer-facing products, database systems fly under the radar like our energy infrastructure.  But they are very, very important.
- They power the deep content of the internet: blogs, consumer applications, health services, etc.
-- Typical web application is server + database + scripting language.
- Huge problems in health services, government, etc. from failure to construct consistent or interoperable models.
-- This is totally solvable, but more political than technical!

+ Databases
- Databases store data efficiently, and retrieve it quickly.
-- Search efficiently over many GBs, or hundreds of GBs of data...
-- \emph{Really} huge datasets need different models than discussed today.
- In the `relational model,' the data are stored in interrelated `tables.'
- Each record (row) is uniquely identified by a `primary key' (index).
- Differs from composite objects in object-oriented programming, since many records in one table may link to a single record of another (e.g., people to a city) and several records may link in different ways (grade to teacher, student, and school).

+ RDB: Time Use Survey, Revisited
../img/rdb.pdf

+ The Relational Model: Normal Forms (Good Practice)
Normal forms are defined by E. F. Codd (1971) as: 
# Each record should be `atomic' that is, non-divisible.  A single row/record, should not contain multiple, divisible pieces.
#- The respondent table should not have a cell with the ages of all household members (stored in a `roster' file).
# No non-prime attribute of the table may be dependent on a proper subset of \emph{any} candidate key.
#- In the time use survey, a respondent ID and activity number jointly identify an activity.  The table should not, therefore, contain information on the respondent.
# The values in a row should refer uniquely to the key -- not to a non-key attribute.
#- In the time use activity tables, we should not store both the activity code and its interpretation.
To avoid repeating cumbersome calculations, these are sometimes violated.

+ RDB: Time Use Survey, Revisited
../img/rdb.pdf

+ Good Practice, in Practice
- Each table should contain a single logical element, without repetition.
- One MUST take some care to understand what is unique in your table, and use that property to link tables: the \emph{primary key}.
- Appropriate primary keys are what make databases actually work efficiently.

+++ Using a Database

+ Relational Database Management Systems (RDBMSs) \\ and the Structured Query Language (SQL)
- Most of the most-prevalent database systems implement the relational model.\footnote{There are always exceptions...}  These systems are called RDBMSs.
- Structured Query Language (SQL) (ISO/IEC 9075:2011) is a standardized (ISO/ANSI) language for interacting with RDBMSs.
- Originally intended to be user-facing, so `fairly intuititive.'
- Despite standardization, the implementations almost all have some (extremely annoying) differences: some tinkering is necessary to migrate between `dialects.'
-- Nevertheless, the basic functionality -- selecting, inserting, deleting, and altering data, is pretty consistent.

+ (Some of) The Most Prevalent Databases
../img/db_logo.pdf
% args are: slide iteration, size, x, y, angle, text
\caveat{2}{25}{68}{84}{20}{NoSQL}
\caveat{3}{28}{34}{61}{20}{This}
\caveat{3}{28}{40}{67}{20}{class.}

+ Opening SQLite
- To just open a file, do:
` \pr sqlite3 atus.sqlite
- This should give you a new prompt.
- To make the output clearer, you can do:
` \pr .mode columns \\ \pr .headers on
- You can also run a file, like so:
` \pr sqlite3 atus.sqlite < ex/limit\_cps.sql
- We'll talk about interfacing to pandas, on Wednesday

+ Navigating SQLite: Time Use Survey
The biggest difference between RDBMS implementations is in access to the metadata: a list of tables and their schema (format).
- To show the tables in the database:
` sqlite> .tables \\ sqlite> .fullschema --indent
- To show the `schema' of a table (its columns and types):
` sqlite> .schema cps
- Types in SQLite: integer, real (float), text (string), or null.
-- Other RDBMSs have more types -- e.g., datetime, or even geographies.
-- SQLite just has date \emph{functions}.

+ \tt{SELECT}ing Columns: Vertical Slicing
This is THE basic SQL syntax that you will use.
- Selecting \emph{all} (\tt{*}) columns from the cps table:
\sqlexternal{ex/select_from_cps.sql}
- You can also name specific columns:
\sqlexternal{ex/select_vars_from_cps.sql}
- Each query ends by a semi-colon.
> 1em
- Upper case keywords an old convention: SQL strings are often used in other languages, and therefore aren't color-highlighted.  Not necessary.
- There is absolutely \emph{no} requirement about the formatting of the query.

+ \tt{LIMIT} (i.e., .head())
- Normally, this would come a bit later... but the last output was pretty excessive.  For exploration, use `\tt{LIMIT}':
\sqlexternal{ex/limit_cps.sql}

+ \tt{WHERE} Requirements: Horizontal Slicing
- Make requirements with `\tt{WHERE}':
\sqlexternal{ex/where_simple.sql}
- Can make multiple requirements with \tt{AND} or \tt{OR}:
\sqlexternal{ex/where_and.sql}
- Note the single `=' sign.

+ \tt{GROUP BY} (i.e., .groupby())
- This functions exactly as groupby() in pandas.
- `Group' by one or more variables, to aggregate over others.
-- Unlike most RDBMSs, SQLite won't complain if you mix and match aggregating functions and non-aggregated fields -- so be careful.
- Many functions: \tt{AVG}, \tt{SUM}, \tt{MAX}, \tt{MIN}, \tt{COUNT}, etc.
\sqlexternal{ex/group_alone_time.sql}

+ \tt{ORDER BY} (i.e., .sort\_values(by = ``..."))
- Sort by one or more fields, ascending or descending (\tt{ASC} or \tt{DESC}).
\sqlexternal{ex/order_group_education_state.sql}

+ \tt{JOIN} (i.e., .join())
- In households with children, what is the likelihood that a spouse or partner is present, by levels of education.  Must \tt{JOIN} tables.
- Alternatively, this can be done with multiple tables in `\tt{FROM}' and join conditions under `\tt{WHERE}.'
\only<1>{\sqlexternal{ex/spouse_present.sql}}
\only<2>{\sqlexternal{ex/spouse_present_where.sql}}

+ Subqueries
- You can use subqueries as tables, for multiple levels of grouping.
- How much time does each sex claim to spend in `Personal/Private activities' such as `necking' and `private activity, unspecified'?
\sqlexternal{ex/sex_by_sex.sql}

+ On The Structure
- Good news is: SQL queries basically always follow the same structure.  
- You may or may not need all the pieces, but there's no question about the order-- there's only one way.  
- The query on the last page is as complicated as it gets.

